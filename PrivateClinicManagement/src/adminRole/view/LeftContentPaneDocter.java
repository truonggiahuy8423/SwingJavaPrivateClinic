/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package adminRole.view;

import Model.Appointment;
import Model.Employee;
import Model.Schedule;
import Model.UserModel;
import adminRole.controller.LeftContentPaneDoctorController;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.Calendar;

/**
 *
 * @author GIAHUY
 */
public class LeftContentPaneDocter extends javax.swing.JPanel {
    private Employee doctor;
    private Schedule schedule;
    private List<Appointment> listOfAppointment = new ArrayList<>();    
    private DefaultTableModel dataOfAppointmentQueue;
    private PatientPage parent;
    public LeftContentPaneDocter(PatientPage parent) {
        initComponents();
        this.parent = parent;
        appointmentQueue.setModel(new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
            }
            
        });
        dataOfAppointmentQueue = (DefaultTableModel)appointmentQueue.getModel();
        appointmentQueue.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        dataOfAppointmentQueue.setColumnIdentifiers(new Object[] {"No.", "Appointment ID", "Patient"});
        refreshButton.setBackground(Color.WHITE);
        this.docIDField.setEditable(false);
        this.docNameField.setEditable(false);
        this.scheduleIDField.setEditable(false);
        this.roomField.setEditable(false);
        this.scheduleDate.setEditable(false);
        this.docIDField.setBackground(Color.WHITE);
        this.docNameField.setBackground(Color.WHITE);
        this.scheduleIDField.setBackground(Color.WHITE);
        this.roomField.setBackground(Color.WHITE);
        this.scheduleDate.setBackground(Color.WHITE);
        
        // listener
        refreshButton.addActionListener(e -> refreshData());
        appointmentQueue.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    LeftContentPaneDocter.this.parent.addNewTab(new AppointmentTab((Integer)appointmentQueue.getValueAt(appointmentQueue.getSelectedRow(), 1), LeftContentPaneDocter.this.parent));
                }
            }
            
        });
        refreshData();
    }
    private String convert_calendar(Calendar c)
    {
        return c == null ? "----/--/--" : "" + String.format("%02d", c.get(Calendar.YEAR)) + "-" + String.format("%02d", c.get(Calendar.MONTH) + 1) + "-"+ String.format("%02d", c.get(Calendar.DATE));

    }
    private void queryData() {
        try {
            doctor = new LeftContentPaneDoctorController().getAnEmployee(Integer.valueOf(this.parent.getUser().getAccount()));
            schedule = new LeftContentPaneDoctorController().getASchedule(doctor.getEmployeeID(), Calendar.getInstance());
            if (schedule != null) {
                listOfAppointment.removeAll(listOfAppointment);
                new LeftContentPaneDoctorController().getListOfAppointment(schedule.getScheduleID(), listOfAppointment);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void displayData() {
        this.docIDField.setText("ID: " + doctor.getEmployeeID().toString());
        this.docNameField.setText("Doctor: " + doctor.getName());
        this.scheduleDate.setText(convert_calendar(Calendar.getInstance()));
        if (schedule != null) {
            noti.setVisible(false);
            this.scheduleIDField.setText("Schedule: " + String.format("%08d", schedule.getScheduleID()));
            this.roomField.setText("Room: " + schedule.getRoomID().toString());
            dataOfAppointmentQueue.setRowCount(0);
            for (Appointment a : listOfAppointment){
                dataOfAppointmentQueue.addRow(new Object[]{a.getOrdinalNumber(), a.getAppointmentID(), a.getPatientName()});
            }
        } else {
            this.scheduleIDField.setText(" ");
            this.roomField.setText(" ");
            noti.setVisible(true);
        }
    }
    private void refreshData() {
        queryData();
        displayData();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentQueue = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();
        docIDField = new javax.swing.JTextField();
        docNameField = new javax.swing.JTextField();
        roomField = new javax.swing.JTextField();
        scheduleIDField = new javax.swing.JTextField();
        scheduleDate = new javax.swing.JTextField();
        noti = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(300, 793));
        setMinimumSize(new java.awt.Dimension(300, 793));
        setPreferredSize(new java.awt.Dimension(300, 793));

        appointmentQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(appointmentQueue);

        refreshButton.setText("Refresh");
        refreshButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        docIDField.setText("ID: 005");

        docNameField.setText("Vo Thi Thu Hoa");
        docNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docNameFieldActionPerformed(evt);
            }
        });

        roomField.setText("Room: 05");

        scheduleIDField.setText("Schedule: 23883293");

        scheduleDate.setText("yyyy/mm/dd");

        noti.setForeground(new java.awt.Color(255, 0, 0));
        noti.setText("The doctor has no schedule today");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(noti, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(docIDField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(docNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scheduleIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(scheduleDate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(docNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(docIDField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scheduleIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scheduleDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refreshButton)
                    .addComponent(noti))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void docNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_docNameFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appointmentQueue;
    private javax.swing.JTextField docIDField;
    private javax.swing.JTextField docNameField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel noti;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField roomField;
    private javax.swing.JTextField scheduleDate;
    private javax.swing.JTextField scheduleIDField;
    // End of variables declaration//GEN-END:variables
}
