/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package adminRole.view;

import Model.Employee;
import Model.Schedule;
import Model.UserModel;
import adminRole.controller.LeftContentPaneRecepController;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author GIAHUY
 */
public class LeftContentPaneReceptionist extends javax.swing.JPanel {
     
    /**
     * Creates new form LeftContentPaneReceptionist
     */
    private Employee receptionist;
    private List<Schedule> listOfSchedule = new ArrayList<>();
    private PatientPage parent;
    private DefaultTableModel dataOfAppointmentQueue;

    public LeftContentPaneReceptionist(PatientPage parent) {
        initComponents();
        this.parent = parent;
        searchButton.setBackground(Color.WHITE);
        refreshButton.setBackground(Color.WHITE);
        searchScheduleDate.getCalendarButton().setBackground(Color.WHITE);
        recepIDField.setEditable(false);
        recepIDField.setBackground(Color.WHITE);
        recepNameField.setEditable(false);
        recepNameField.setBackground(Color.WHITE);
        scheduleTable.setModel(new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
            }
        });
        dataOfAppointmentQueue = (DefaultTableModel)scheduleTable.getModel();
        scheduleTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        dataOfAppointmentQueue.setColumnIdentifiers(new Object[]{"ID", "Doctor", "Service", "Room", "Date", "State"});
        // listener
        refreshButton.addActionListener(e -> refreshData());
        searchButton.addActionListener(e -> {
            if (searchScheduleDate.getCalendar() != null) {
                String sql = "select sc.schedule_id, sc.schedule_date, sc.state, sc.next_ordinal_number, sc.service_id, sv.service_name, sc.room_id, sc.employee_id, e.full_name, sv.cost "
                + "from Schedule sc inner join employee e on sc.employee_id = e.employee_id "
                + "inner join service sv on sc.service_id = sv.service_id where trunc(sc.schedule_date) = trunc(DATE " + convert_calendar2(searchScheduleDate.getCalendar()) + ")";
                queryData(sql);
                displayData();
            }
        });
        refreshData();
    }
    private String convert_calendar2(Calendar c)
    {
        return c == null ? "'----/--/--'" : "" + String.format("'%02d", c.get(Calendar.YEAR)) + "-" + String.format("%02d", c.get(Calendar.MONTH) + 1) + "-"+ String.format("%02d'", c.get(Calendar.DATE));

    }
    private String convert_calendar(Calendar c)
    {
        return c == null ? "----/--/--" : "" + String.format("%02d", c.get(Calendar.YEAR)) + "-" + String.format("%02d", c.get(Calendar.MONTH) + 1) + "-"+ String.format("%02d", c.get(Calendar.DATE));

    }
    private void queryData(String sql) {
        try {
            receptionist = new LeftContentPaneRecepController().getAnEmployee(Integer.valueOf(parent.getUser().getAccount()));
            listOfSchedule.removeAll(listOfSchedule);
            new LeftContentPaneRecepController().getScheduleList(sql, listOfSchedule);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void displayData() {
        recepIDField.setText("ID: " + receptionist.getEmployeeID());
        recepNameField.setText("Receptionist: " + receptionist.getName());
        dataOfAppointmentQueue.setRowCount(0);
        for (Schedule s : listOfSchedule) {
            dataOfAppointmentQueue.addRow(new Object[] {s.getScheduleID(), s.getDoctorName(), s.getServiceName(), s.getRoomID(), s.getScheduleDate(), (s.getState() == 1 ? "Available" : "Closed")});
        }
    }
    private void refreshData() {
        String sql = "select sc.schedule_id, sc.schedule_date, sc.state, sc.next_ordinal_number, sc.service_id, sv.service_name, sc.room_id, sc.employee_id, e.full_name, sv.cost "
                + "from Schedule sc inner join employee e on sc.employee_id = e.employee_id "
                + "inner join service sv on sc.service_id = sv.service_id order by trunc(sc.schedule_date) desc";
        queryData(sql);
        displayData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        scheduleTable = new javax.swing.JTable();
        searchScheduleDate = new com.toedter.calendar.JDateChooser();
        searchButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        recepIDField = new javax.swing.JTextField();
        recepNameField = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(300, 793));
        setMinimumSize(new java.awt.Dimension(300, 793));
        setPreferredSize(new java.awt.Dimension(300, 793));

        scheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(scheduleTable);

        searchButton.setText("Search");
        searchButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        refreshButton.setText("Refresh");
        refreshButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        recepIDField.setText("ID: 005");

        recepNameField.setText("Vo Thi Thu Hoa");
        recepNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recepNameFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchScheduleDate, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(recepIDField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recepNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recepNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recepIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchScheduleDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchButton)
                        .addComponent(refreshButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void recepNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recepNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recepNameFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField recepIDField;
    private javax.swing.JTextField recepNameField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable scheduleTable;
    private javax.swing.JButton searchButton;
    private com.toedter.calendar.JDateChooser searchScheduleDate;
    // End of variables declaration//GEN-END:variables
}
